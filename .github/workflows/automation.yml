name: Run WDIO Tests with OBOT Docker

on:
  workflow_dispatch:
  repository_dispatch:
    types: [pr-created]

jobs:
  wdio-tests:
    runs-on: ubuntu-latest

    permissions:
      contents: write # Required for gh-pages deploy
      pages: write # Required for pages deploy
      id-token: write # Required for actions/deploy-pages
      actions: read
      checks: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 22

      - name: Cache NPM Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Docker
        uses: docker/setup-docker@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Run OBOT container
        run: |
          docker run -d --name obot \
            -p 8080:8080 \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            ghcr.io/obot-platform/obot:latest

      - name: Wait for OBOT to be ready
        run: |
          echo "Waiting for OBOT container..."
          for i in {1..12}; do
            if curl -sf http://localhost:8080/api/me | grep -q '"username":"nobody"'; then
              echo "OBOT API is ready."
              break
            fi
            echo "Not ready yet... retry #$i"
            sleep 5
          done

      - name: Install dependencies
        run: npm ci

      - name: Run WDIO Tests
        env:
          WPURL: ${{ secrets.WPURL }}
          WPUsername: ${{ secrets.WPUsername }}
          WPPassword: ${{ secrets.WPPassword }}
          localHostURL: ${{ secrets.localHostURL }}
          gitLabToken: ${{ secrets.gitLabToken }}
        run: npm run wdio:byScenario
        continue-on-error: true

      - name: Upload MCP Server Reports
        uses: actions/upload-artifact@v4
        with:
          name: MCP-Server-Reports
          path: MCP Server Reports/
        continue-on-error: true

      - name: Generate Allure Report
        run: |
          npx allure generate allure-results --clean -o allure-report || echo "Allure generation failed"
        continue-on-error: true

      - name: Upload Allure Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Allure-Report
          path: allure-report

      - name: Deploy Allure Report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: gh-pages
          keep_files: false